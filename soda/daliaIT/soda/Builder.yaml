type: php.Class
description: |
  Uses templates to turn soda code into native source code. 
extends: Processor
use: 
  - OutOfBoundsException
  - Exception
  - RuntimeException
properties:
  protected:
    templates = array(): array of templates, used to render soda code as native code.
methods:
  public:
    build ($targetDirectory,array $index,array $defaults): |
      *return this
      try{
        foreach ($index as $name => $meta){
          $template = $this->getTemplate($meta['type']);
          $soda = array_replace($defaults, $meta, $this->readSodaFile($meta['path']));
          $classCode = $template->render($soda);
          $classPath = "$targetDirectory/".str_replace('.', '/', $name).'.php';
          $this->writeFile($classPath, $classCode);
        }
      }
      catch(Exception $e){
        throw new RuntimeException("Build failed",0,$e);
      }
    
    getTemplate($type): |
      * return template
      if(! $this->hasTemplate($type)) throw new OutOfBoundsException(
        "No template registered for the type '{$meta['type']}'"
      );
      $templates = $this->getTemplates();
      return $templates[$type];
    
    getTemplates(): |
      * return array
      return $this->templates;
      
    hasTemplate($type): |
      * return bool
      $templates = $this->getTemplates();
      return isset($templates[$type]);
    
    setTemplate($type, Template $template): |
      * return Builder
      $templates = $this->getTemplates();
      $templates[$type] = $template;
      $this->setTemplates($templates);
      return $this;
    
    setTemplates(array $templates): |
      * return BUilder
      $this->templates = $templates;
      return $this;
 
    writeFile($path, $contents): |
      $parts = explode('/',$path);
      $file = array_pop($parts);
      $directory = implode('/',$parts);
      if(!file_exists($directory)){
        mkdir($directory,0777,true);
      }
      file_put_contents($path,$contents);