type: php.Class
description: |
  Scans source directorys and creates a index.
  The index contains: 
extends: Processor
tags:
  author: Oliver Anan <oliver@ananit.de>
use:
  - RecursiveIteratorIterator
  - RecursiveDirectoryIterator
  - LogicExcption
  - RuntimeException
  - YaLinqo\Enumerable
  
properties:
  protected:
    indexFilePattern = '|\.yaml$|': >
      string 
      used as regex pattern to detrminate if 
      a file should be indexed 
methods:
  public:
    getCanFiles ($directorys): |
      * return array
      $directorys = (array) $directorys;
      $files = array();
      foreach($directorys as $directory){
        $realDirectory = realpath($directory);
        $pathLength = strlen($realDirectory);
        $files[$directory] = array();
        $objects = new RecursiveIteratorIterator(
          new RecursiveDirectoryIterator($realDirectory), 
          RecursiveIteratorIterator::SELF_FIRST
        );
        foreach($objects as $name => $object){
          $match = preg_match($this->indexFilePattern,$name);
          if ($match === false){ 
            throw new LogicException(
              "regex error, please check your pattern: "
              .$this->indexFilePattern
            );
          }
          if($match){
            $files[$directory][] = str_replace(
            DIRECTORY_SEPARATOR,
            '/',
            substr($name, $pathLength+1)
            );
          }
        }
      }
      return $files;

    buildIndex($directorys): |
      $index = array();
      $filesPerDirectory = $this->getCanFiles($directorys);
      foreach ($filesPerDirectory as $directory => $files){
        foreach($files as $file){
          $path = "$directory/$file";
          $can = $this->readSodaFile($path);
          if(! isset($can['type']) ) throw new RuntimeException(
            "Missing type information: $path"
          );
          if (isset($can['name'])){
            $canName = $can['name'];
          } else {
            $canName = substr(
              str_replace('/','.',$file),
              0,
              strrpos($file,'.')
            );
          }
          $nameParts = explode('.',$canName);
          $shortName = array_pop($nameParts);
          $namespace = implode('\\',$nameParts);
          $index[$canName] = array(
            'type'      => $can['type'],
            'path'      => $path,
            'hash'      => md5(serialize($can)),
            'namespace' => $namespace,
            'name'      => $shortName
          );
        }
      }
      return $index;

  protected:    
    normalizeMethodName:
    normalizePropertyName:
    